@startuml
left to right direction
package RenderSubsystem.AbstractRenderObjects
{
    
    abstract class IMaterial
    {
        +vec3 baseColor;
        +void* metallic;
        +void* roughnes;
        +float specular;
        +float albedo;
        +float reflectivity;

        +virtual void bind();
        +virtual void unbind();
    }
    abstract class IMesh
    {
        +virtual void draw();
        +virtual void drawIndexed(int count);
    }
    abstract class IShader
    {
        +virtual void bind();
        +virtual void unbind();
    }
    abstract class ITexture
    {
        +virtual void bind();
        +virtual void unbind();
        +virtual void* getTexture();
    }
}

package RenderSubsystem.AbstractRenderObjects {


    class OpenGLMaterial extends IMaterial
    {
        +void bind() override;
        +void unbind() override;
    }

    class OpenGLMesh extends IMesh
    {
        +void draw() override;
        +void drawIndexed() override;
    }

    class OpenGLShader extends IShader
    {
        +void bind() override;
        +void unbind() override;
    }

    class OpenGLTexture extends ITexture
    {
        +void bind() override;
        +void unbind() override;    
    }

    class VulkanMaterial extends IMaterial
    {
        +void bind() override;
        +void unbind() override;
    }
    class VulkanMesh  extends IMesh
    {
        +void draw() override;
        +void drawIndexed() override;
    }
    class VulkanShader extends IShader
    {
        +void bind() override;
        +void unbind() override;
    }
    class VulkanTexture extends ITexture
    {
        +void bind() override;
        +void unbind() override;    
    }

}

package RenderSubsystem.AbstractRenderObjects 
{
    class TextureFactory
    {
        -static unordered_map<string, weak_ptr<ITexture>> textureCache;
        +static shared_ptr<ITexture> createOrGetTexture(shared_ptr<RTexture>& texture)
    }

    ITexture -up-* TextureFactory

    class ShaderFactory
    {
        -static unordered_map<string, weak_ptr<IShader>> shaderCache;
        +static shared_ptr<IShader> createOrGetShader(shared_ptr<RShader>& fragShader, shared_ptr<RShader>& vertShader)
    }

    IShader -up-* ShaderFactory

    class MeshFactory
    {
        -static unordered_map<string, weak_ptr<IMesh>> meshCache;
        +static shared_ptr<IMesh> createOrGetMesh(shared_ptr<RMesh>& mesh)
    }

    IMesh -up-* MeshFactory

    class MaterialFactory
    {
        -static unordered_map<string, weak_ptr<IMaterial>> materialCache;
        +static shared_ptr<IMesh> createOrGetMaterial(shared_ptr<RMaterial>& material)
    }

    IMaterial -up-* MaterialFactory
}

@enduml