@startuml
package ECSModule
{
    package ECSComponents
    {
        struct PositionComponent
        {
            +float x;
            +float y;
            +float z;

            +vec3 toGLMVec() const;
            +void fromGLVec(const glm::vec3& v);
        }

        struct Rotation
        {
            +float x;
            +float y;
            +float z;

            +quat toQuat() const;
            +vec3 toEuler() const;
            +void fromQuat(const quat& q);
            +void fromEuler(const vec3& euler);
        }

        struct ScaleComponent 
        {
            +float x;
            +float y;
            +float z;

            +vec3 toGLMVec() const;
            +void fromGLMVec(const vec3& v);
        }

        struct CameraComponent
        {
            +float fov;
            +float aspect;
            +float nearClip;
            +float farClip;
            +bool isViewportCamera;
        }

        struct MeshComponent
        {
            +char meshResourcePath[256];
            +char vertShaderPath[256];
            +char fragShaderPath[256];
            +char texturePath[256];

            +optional<shared_ptr<RMesh>> meshResource;
            +optional<shared_ptr<RShader>> vertShaderResource;
            +optional<shared_ptr<RShader> fragSXhaderResource;
            +optional<shared_ptr<RTexture>> textureResource;
        }

        struct PointLightComponent
        {
            +float radius;
            +float intencity;
        }

        struct DirectionalLightComponent
        {
            +float intencity;
        }

        struct Script
        {
            string striptPath;
            optional<table> scriptTable;

            void initialize();
            void start();
            void update(float deltaTime);
            void end();
        }
    }

    package ECSSystems 
    {
        abstract IECSSystem
        {
            +virtual void registerSystem(flecs::world& world) = 0;
            +virtual void startSystem(flecs::world& world) = 0;
            +virtual void stopSystem(flecs::world& world) = 0;
        }

        class ECSLuaScriptSystem implements IECSSystem

        class PhysicsSimulationSystem implements IECSSystem
    }

    class ECSModule <<singletone>>
    {
        -flecs::world m_world;
        -bool m_tickEnabled = false;
        -string m_currentWorldFile;
        +static ECSModule& getInstance();
        +void startup();
        +void shutdown();
        +void loadInitialWorldState()
        +void loadWorldFromFile(const string& path);
        +void startSimulation();
        +void stopSimulation();

        +bool isimulationEnabled();
        +bool isWorldValid();

        +Event<> OnLoadInitialWorldState;
        +Event<> OnComponentsChanged;

        -void registerComponents();
        -void registerObservers();
    }
    ECSModule <.right. ECSComponents
    ECSModule <.down. ECSSystems
    ECSSystems <.up. ECSComponents
}
@enduml