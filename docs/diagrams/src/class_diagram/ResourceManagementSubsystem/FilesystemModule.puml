@startuml
package FilesystemModule
{
    enum FResult
    {
        SUCCESS,
        ALREADY_EXISTS,
        INVALID_PATH,
        UNDEFIND
    }

    enum DirContentType
    {
        ALL,
        FILES,
        FOLDERS
    }

    struct ContentSearchFilter
    {
        +DirContentType = ALL;
        +optional<vector<string>> fileExtensions;
        +optional<string> filter;
    }

    class FilesystemModule <<singletone>>
    {
        -FilesystemModule() = default;
        
        +using constr = const string&; <<type alias>>

        +~FilesystemModule() = default;
        +static FilesystemModule& getInstance();

        +void startup() {}
        +void shutDown(){}

        +FResult createFile(constr dirPath, constr fileName);
        +FResult createDirectory(constr dirPath, constr dirName);
        +FResult deleteFile(constr filePath);
        +FResult duplicateFileInDirectory(constr filePath);
        +FResult moveFileToDirectory(constr filePath, constr destPath);
        +FResult copyAbsolutePath(constr filePath);
        +FResult copyRelativePath(constr filePath);

        +FResult writeTextFile(constr filePath, constr content);
        +FResult appendToTextFile(constr filePath, constr content);
        +FResult writeBinaryFile(constr filePath, const std::vector<uint8_t>& data);
        +FResult appendToBinaryFile(constr filePath, const std::vector<uint8_t>& data);

        +std::vector<uint8_t> readBinaryFile(constr filePath);
        +std::string readTextFile(constr filePath);

        +std::string getEngineAbsolutePath(constr relativePath);
        +std::string getCurrentPath();
        +std::string getFileName(constr filePath);
        +std::string getFileExtensions(constr filePath);
        +std::string getRelativeToTheResources(constr filePath);

        +size_t getFileSize(constr filePath);
        +std::vector <std::string> getDirectoryContents(constr dirPath, ContentSearchFilter filter);
        +uint64_t getFolderModificationTime(constr folderPath);

        +bool isPathExists(constr path);
        +bool isFile(constr path);
        +bool isDirectory(constr path);
    }
    FilesystemModule <.. FResult
    FilesystemModule <.. DirContentType
    FilesystemModule <.. ContentSearchFilter

    class DirectoryIterator
    {
        -optional<uint64_t> m_dirLastEditTime;
        -fs::path m_rootPath;
        -fs::path m_currentPath;

        +using constr = const std::string&; <<type alias>>

        +DirectoryIterator();
        +DirectoryIterator(constr startupPath);

        +FResult stepIntoRoot();
        +FResult stepIntoParent();
        +FResult stepIntoFolder(constr folderName);

        +string getCurrentDirName();
        +string getCurrentDir();
        +string getCurrentDirWithAppend(constr appendName);
        +vector<string> getCurrentDirContents(const ContentSearchFilter& filter);
        +bool isRootPath();
        +bool isCurrentDirChanged();
    }

    DirectoryIterator <.. FilesystemModule
}
@enduml