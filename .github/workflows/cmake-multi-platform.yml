name: CI Integration Tests on Linux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-ubuntu-debug:
    name: Build and Test on Ubuntu (Debug)
    runs-on: ubuntu-latest

    steps:
      # 1. Убедиться в отсутствии блокировок APT
      - name: Fix APT Locks
        run: |
          sudo rm -rf /var/lib/dpkg/lock-frontend
          sudo rm -rf /var/lib/dpkg/lock
          sudo rm -rf /var/cache/apt/archives/lock
          sudo rm -rf /var/lib/apt/lists/lock

      # 2. Обновление репозиториев
      - name: Update APT and Install System Dependencies
        run: |
          sudo apt-get update || (sudo apt-get update && sudo apt-get -f install)
          sudo apt-get upgrade -y
          sudo apt-get install -y wget build-essential

      # 3. Установка Conan
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      # 4. Кэширование Conan пакетов
      - name: Cache Conan Packages
        uses: actions/cache@v3
        with:
          path: ~/.conan
          key: ${{ runner.os }}-conan-${{ hashFiles('conanProfileDebugLinux') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      # 5. Установка Vulkan SDK и Shaderc
      - name: Install Vulkan SDK and Shaderc
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo gpg --dearmor -o /usr/share/keyrings/lunarg-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/lunarg-keyring.gpg] https://packages.lunarg.com/vulkan/1.3.250/ubuntu/ focal main" | sudo tee /etc/apt/sources.list.d/lunarg-vulkan.list
          sudo apt-get update
          sudo apt-get install -y vulkan-sdk shaderc

      # 6. Установка системных зависимостей
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgl1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxcb-xfixes0-dev \
            libxcb-present-dev \
            libxcb-randr0-dev \
            uuid-dev \
            libfontenc-dev \
            libice-dev \
            libsm-dev

      # 7. Установка зависимостей через Conan
      - name: Install Dependencies with Conan
        run: |
          conan install . \
            --output-folder=Engine/ThirdParty \
            --build=missing \
            --profile=./conanProfileDebugLinux \
            --profile:build=./conanProfileDebugLinux

      # 8. Установка CMake
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.2'

      # 9. Генерация файлов проекта с помощью CMake
      - name: Generate Project Files with CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE="Engine/ThirdParty/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=Debug

      # 10. Предварительная компиляция шейдеров
      - name: Precompile Shaders
        run: |
          glslc Engine/Core/Shaders/shader.vert -o build/vert.spv
          glslc Engine/Core/Shaders/shader.frag -o build/frag.spv

      # 11. Сборка проекта
      - name: Build Project
        run: |
          cmake --build build --preset conan-debug

      # 12. Запуск тестов
      - name: Run Tests
        run: |
          cd build
          ctest --test-dir ./build --output-on-failure -C Debug
